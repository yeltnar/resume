{"version":3,"sources":["logo.svg","components/templates/section.js","components/title/Title.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Section","props","className","title","to_return","content","map","single_content","i","single_to_return","type","data","cur","dangerouslySetInnerHTML","__html","key","reduce","acc","push","Fragment","label","date","console","log","JSON","stringify","Title","href","contact","email","name","website","link","target","text","LoadingElement","App","useState","resume","resume_obj","undefined","length","sectionElementArr","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"okFAAAA,EAAOC,QAAU,IAA0B,kC,+JCI3C,SAASC,EAAQC,GAEb,OACI,yBAAKC,UAAU,WAEX,mBAKR,WACI,OAAQ,yBAAMA,UAAU,iBAAiBD,EAAME,SAN3C,MACA,mBAOR,WAA0B,IAIlBC,EAFcH,EAAXI,QAEiBC,KAAI,SAACC,EAAeC,GAExC,IAAIC,EAuDJ,MArDyB,UAAtBF,EAAeG,KAEdD,EAAmBF,EAAeI,KAAKL,KAAI,SAACM,EAAIJ,GAC5C,OAAO,yBAAKK,wBAAyB,CAACC,OAAOF,GAAMG,IAAKP,OAEjC,kBAAtBD,EAAeG,MAEpBD,EAAmBF,EAAeI,KAAKK,QAAO,SAACC,EAAKL,EAAKJ,GAOrD,OANAS,EAAIC,KACA,kBAAC,IAAMC,SAAP,KACI,yBAAKjB,UAAU,SAASU,EAAIQ,MAA5B,KACA,yBAAKlB,UAAU,WAAWU,EAAIP,WAG/BY,IACR,IAEHR,EAAoB,yBAAKP,UAAU,iBAAiBO,IAEzB,eAAtBF,EAAeG,KAEpBD,EACI,0BAAMP,UAAU,qBACZ,0BAAMA,UAAU,SAASK,EAAeI,KAAK,IAC7C,0BAAMT,UAAU,QAAQK,EAAec,MAAQ,eAG5B,qBAAtBd,EAAeG,KAEpBD,EACI,0BAAMP,UAAU,6CACZ,yBAAKA,UAAU,SAASK,EAAeI,KAAK,IAC5C,yBAAKT,UAAU,QAAQK,EAAec,MAAQ,eAI3B,WAAtBd,EAAeG,MAEpBD,EAAmBF,EAAeI,KAAKL,KAAI,SAACM,EAAIJ,GAC5C,OACI,yBAAKO,IAAKP,GAAV,KAAgBI,MAIxBH,EAAmB,yBAAKP,UAAU,oBAAoBO,KAGtDa,QAAQC,IAAIC,KAAKC,UAAUlB,EAAe,KAAK,IAE/CE,EAAmBe,KAAKC,UAAUlB,EAAe,KAAK,IAInDE,KAIX,OAAQ,yBAAKP,UAAU,mBAAmBE,KAxEtC,O,iBCNZ,SAASsB,IAEL,OACI,yBAAKxB,UAAU,WACX,yBAAKA,UAAU,SACX,uBAAGyB,KAAI,iBAAYC,IAAQC,QAAUD,IAAQC,QAEjD,yBAAK3B,UAAU,QAAQ0B,IAAQE,MAC/B,yBAAK5B,UAAU,WACX,uBAAGyB,KAAMC,IAAQG,QAAQC,KAAMC,OAAO,UAAUL,IAAQG,QAAQG,QCmBhF,SAASC,IACP,OAAQ,6BAAK,uCAGAC,MA3Bf,WAAgB,IAAD,EAEsBC,mBAASC,KAF/B,mBAENC,EAFM,KAIb,GAJa,UAIGC,IAAbD,EACD,OAAOJ,EAGTb,QAAQC,IAAIgB,EAAWE,QAEvB,IAAMC,EAAoBH,EAAWjC,KAAI,SAACM,EAAIJ,GAE5C,OADAc,QAAQC,IAAIX,GACJ,kBAACZ,EAAD,CAASG,MAAOS,EAAIT,MAAOE,QAASO,EAAIP,QAASU,IAAKP,OAGhE,OACE,yBAAKN,UAAU,OACb,kBAACwB,EAAD,MACA,0BAAMxB,UAAU,eAAewC,KCfjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b94ba2f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nimport './style.css'\n\nfunction Section(props){\n\n    return (\n        <div className=\"section\">\n            {/* <div>{JSON.stringify(props,null,2)}</div> */}\n            <SectionTitle></SectionTitle>\n            <SectionContent></SectionContent>\n        </div>\n    );\n\n    function SectionTitle(){\n        return (<div  className=\"section-title\">{props.title}</div>);\n    }\n    function SectionContent(){\n\n        const {content} = props;\n\n        let to_return = content.map((single_content,i)=>{\n\n            let single_to_return;\n\n            if(single_content.type===\"plain\"){\n                \n                single_to_return = single_content.data.map((cur,i)=>{\n                    return <div dangerouslySetInnerHTML={{__html:cur}} key={i}/>;\n                });\n            }else if(single_content.type===\"label-content\"){\n                \n                single_to_return = single_content.data.reduce((acc, cur, i) => {\n                    acc.push((\n                        <React.Fragment>\n                            <div className=\"label\">{cur.label}:</div>\n                            <div className=\"content\">{cur.content}</div>\n                        </React.Fragment>\n                    ));\n                    return acc\n                }, []);\n\n                single_to_return = (<div className=\"label-content\">{single_to_return}</div>);\n\n            }else if(single_content.type===\"plain-date\"){\n\n                single_to_return = (\n                    <span className=\"plain-date-holder\">\n                        <span className=\"title\">{single_content.data[0]}</span>\n                        <span className=\"date\">{single_content.date || \"ADD A DATE\"}</span>\n                    </span>\n                );\n            }else if(single_content.type===\"achievement-date\"){\n\n                single_to_return = (\n                    <span className=\"plain-date-holder achievement-date-holder\">\n                        <div className=\"title\">{single_content.data[0]}</div>\n                        <div className=\"date\">{single_content.date || \"ADD A DATE\"}</div>\n                    </span>\n                );\n\n            }else if(single_content.type===\"bullet\"){\n\n                single_to_return = single_content.data.map((cur,i)=>{\n                    return (\n                        <div key={i}>* {cur}</div>\n                    );\n                });\n\n                single_to_return = <div className=\"bullet_container\">{single_to_return}</div>\n\n            }else{\n                console.log(JSON.stringify(single_content,null,2));\n                debugger\n                single_to_return = JSON.stringify(single_content,null,2)\n            }\n\n            // return <span key={i}>{single_to_return}</span>;\n            return single_to_return;\n\n        });\n\n        return (<div className=\"section-content\">{to_return}</div>);\n\n        function subSection(){\n            \n        }\n    }\n}\n\nexport {Section}","import React, {useState} from 'react';\nimport {contact} from \"../../data/main.json\"\nimport './style.css';\n\nfunction Title(){\n\n    return (\n        <div className=\"contact\">\n            <div className=\"email\">\n                <a href={`mailto:${contact.email}`}>{contact.email}</a>\n            </div>\n            <div className=\"name\">{contact.name}</div>\n            <div className=\"website\">\n                <a href={contact.website.link} target=\"_blank\">{contact.website.text}</a>\n            </div>\n        </div>\n    );\n}\n\nexport {\n    Title\n}","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {Section} from \"./components/templates/section\"\nimport {Title} from \"./components/title/Title\"\n\nimport {resume} from \"./data/main.json\"\n\nfunction App() {\n\n  const [resume_obj, setResumeObj] = useState(resume);\n\n  if(resume_obj===undefined){\n    return LoadingElement\n  }\n\n  console.log(resume_obj.length);\n\n  const sectionElementArr = resume_obj.map((cur,i)=>{\n    console.log(cur);\n    return (<Section title={cur.title} content={cur.content} key={i}></Section>)\n  });\n\n  return (\n    <div className=\"App\">\n      <Title></Title>\n      <span className=\"main_resume\">{sectionElementArr}</span>\n    </div>\n  );\n}\n\nfunction LoadingElement(){\n  return (<div><i>Loading</i></div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}